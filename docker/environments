### isobox manifest

Since docker incapsulates everything that we need for the app to run,
it makes sense to reuse that environment for all intents and purposes,
such as development, testing and production deployments.

The main distinction between these use cases should not be the environment,
but configuration and/or the code.

### best practices

1. setup rarely changing core stuff at the beginning of Dockerfile
  -- makes use of layer caching

2. merge RUN commands
  -- reduces layer count

3. create scripts to build and mount your container:

  ./scripts/config.sh -- constants used by other scripts
  ./scripts/build.sh -- builds your image
  ./scripts/mount.sh -- mounts your code over the image for development
  ./scripts/docker/mount.sh -- entrypoint for mounting (setup -> run shell -> teardown)
  ./scripts/npm/build.sh -- npm task to build assets for production
  ./scripts/npm/seed.sh -- npm task to seed complex infrastructure with data
  ./scripts/npm/development.sh -- boots app instance with asset watchers etc
  ./scripts/npm/production.sh -- boots app cluster for production

4. create a docker-compose.yml for your dependencies, spool them up:

  docker-compose up

5. build your npm packages in a cached layer, copy over to app dir,
   mount your dev code in a separate dir, create a symbolic link to stored app;
   your mount code should create a temporary user with same uid/gid as host user
   to allow seamless editing of files generated from within the container
??? create a long-term caching layer that does not depend on package.json contents ???
??? then do a second npm install that does depend on it ???

6. if you plan to mount multiple containers to run shell commands concurrently,
   you must modify your mount code to expose your first (base) container's npm
   package dir via volume, then mount this volume in other containers -
   this is to ensure any package changes are instantly reflected across
   your many container instances, e.g. when running "ember install some-plugin"
   and hot reloading your "ember server" in another container without issues.
